Index: app/src/main/java/com/example/gigi_ibuhamil/pages/kesimpulanscreen/kesimpulanscreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.gigi_ibuhamil.pages.kesimpulanscreen\r\n\r\nimport android.app.Application\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.input.TextFieldValue\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport com.example.gigi_ibuhamil.database.HistoryItem\r\nimport com.example.gigi_ibuhamil.database.HistoryViewModel\r\nimport com.example.gigi_ibuhamil.database.HistoryViewModelFactory\r\nimport com.example.gigi_ibuhamil.ui.DaftarColor\r\nimport com.example.gigi_ibuhamil.ui.gradbg\r\nimport com.example.gigi_ibuhamil.util.SavedPreference\r\nimport com.example.gigi_ibuhamil.util.Screen\r\nimport com.example.gigi_ibuhamil.models.Result\r\nimport com.google.firebase.firestore.FieldValue\r\nimport com.google.firebase.firestore.SetOptions\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\n\r\n\r\n@ExperimentalFoundationApi\r\n@Composable\r\nfun KesimpulanScreen(navController: NavController) = Box(\r\n    modifier = Modifier\r\n        .background(gradbg)\r\n        .fillMaxSize()\r\n) {\r\n    Column {\r\n        KesimpulanTitle()\r\n        Isi(navController)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun KesimpulanTitle() {\r\n    Column(\r\n        verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(top = 30.dp)\r\n    ) {\r\n        Row(Modifier.padding(start = 10.dp)) {\r\n            Text(\r\n                text = \"Kesimpulan\",\r\n                style = MaterialTheme.typography.h4,\r\n                modifier = Modifier\r\n                    .padding(bottom = 30.dp)\r\n                    .weight(3f)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Isi(navController: NavController) {\r\n    val TAG = \"Get user's data\"\r\n    val context = LocalContext.current\r\n    val mHistoryViewModel: HistoryViewModel = viewModel(\r\n        factory = HistoryViewModelFactory(context.applicationContext as Application)\r\n    )\r\n    val db = Firebase.firestore\r\n    val resultCollection = db.collection(\"result\")\r\n    val userCollection = db.collection(\"users\")\r\n    val nama = SavedPreference.getDisplayName(context = context).toString()\r\n    val diagnosis = SavedPreference.getDiagnosis(context = context).toString()\r\n    val email = SavedPreference.getEmail(context = context).toString()\r\n    val bmi = SavedPreference.getBMI(context = context).toString()\r\n    val perilaku = SavedPreference.getPerilaku(context = context).toString()\r\n    val pola = SavedPreference.getPola(context = context).toString()\r\n    val usia = SavedPreference.getUsia(context = context).toString()\r\n    val tahun = SavedPreference.getTahun(context = context).toString()\r\n    var dialogState by remember { mutableStateOf(false) }\r\n\r\n    var namaController by remember { mutableStateOf(TextFieldValue(nama)) }\r\n    var emailController by remember { mutableStateOf(TextFieldValue(email)) }\r\n    var diagnosisController by remember { mutableStateOf(TextFieldValue( diagnosis)) }\r\n    var bmiController by remember { mutableStateOf(TextFieldValue(bmi)) }\r\n    var perilakuController by remember { mutableStateOf(TextFieldValue(perilaku)) }\r\n    var polaController by remember { mutableStateOf(TextFieldValue(pola)) }\r\n    var usiaController by remember { mutableStateOf(TextFieldValue(usia)) }\r\n    var tahunController by remember { mutableStateOf(TextFieldValue(tahun)) }\r\n\r\n    val diagResult = Result(\r\n        namaController.text,\r\n        emailController.text,\r\n        diagnosisController.text,\r\n        bmiController.text,\r\n        perilakuController.text,\r\n        polaController.text,\r\n        usiaController.text,\r\n        tahunController.text,\r\n    )\r\n    BoxWithConstraints(\r\n        modifier = Modifier\r\n            .padding(7.5.dp)\r\n            .clip(RoundedCornerShape(10.dp))\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(DaftarColor)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth()\r\n                    .padding(15.dp),\r\n                verticalArrangement = Arrangement.Top,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                if (dialogState == true) {\r\n                    AlertDialog(\r\n                        modifier = Modifier.clip(RoundedCornerShape(15.dp)),\r\n                        onDismissRequest = { dialogState = false },\r\n                        title = {\r\n                            Text(\r\n                                fontSize = MaterialTheme.typography.h5.fontSize,\r\n                                textAlign = TextAlign.Center,\r\n                                text = \"Peringatan\"\r\n                            )\r\n                        },\r\n                        text = {\r\n                            Text(\r\n                                fontSize = 20.sp,\r\n                                textAlign = TextAlign.Center,\r\n                                text = \"Data hasil diagnosis anda akan kami rekam untuk kepentingan penelitian dan data pribadi anda akan kami jaga kerahasiaannya.\"\r\n                            )\r\n                        },\r\n                        confirmButton = {\r\n                            Button(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth(),\r\n                                onClick = {\r\n                                    dialogState = false\r\n                                    navController.navigate(Screen.WelcomeScreen.route) { popUpTo(0) }\r\n                                    SavedPreference.setDefaultDiagnosis(context)\r\n                                    SavedPreference.setDefaultBMI(context)\r\n                                    SavedPreference.setDefaultPerilaku(context)\r\n                                    SavedPreference.setDefaultPolaMakan(context)\r\n                                }) {\r\n                                Text(fontSize = 15.sp, text = \"Baik saya mengerti\")\r\n                            }\r\n                        },\r\n                        dismissButton = {\r\n                        }\r\n                    )\r\n                }\r\n                Column(\r\n                    verticalArrangement = Arrangement.Center,\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                    modifier = Modifier\r\n                        .padding(5.dp)\r\n                        .verticalScroll(rememberScrollState())\r\n                        .weight(1f, false)\r\n                ) {\r\n                    OutlinedTextField(\r\n                        value = namaController,\r\n                        onValueChange = { namaController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"Nama\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = emailController,\r\n                        onValueChange = { emailController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"E-Mail\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = diagnosisController,\r\n                        onValueChange = { diagnosisController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"Diagnosis\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = bmiController,\r\n                        onValueChange = { bmiController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"BMI\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = perilakuController,\r\n                        onValueChange = { perilakuController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"Perilaku Kesgilut\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = polaController,\r\n                        onValueChange = { polaController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"Pola Makan\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = tahunController,\r\n                        onValueChange = { tahunController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"Tahun Kelahiran\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    OutlinedTextField(\r\n                        value = usiaController,\r\n                        onValueChange = { usiaController = it },\r\n                        enabled = false,\r\n                        label = { Text(\"Usia Kehamilan\", color = Color.White) },\r\n                        singleLine = true,\r\n                        colors = TextFieldDefaults.outlinedTextFieldColors(\r\n                            focusedBorderColor = Color.White,\r\n                            unfocusedBorderColor = Color.White,\r\n                            cursorColor = Color.White),\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        textStyle = TextStyle(color = Color.White, fontSize = 15.sp)\r\n                    )\r\n                    Button(onClick = {\r\n                      fun insertIntoDB(mHistoryViewModel: HistoryViewModel) {\r\n                            var ids = 0\r\n                            ids += 1\r\n                            mHistoryViewModel.insertProduct(\r\n                                HistoryItem(\r\n                                    Id = ids,\r\n                                    Name = namaController.text,\r\n                                    Email = emailController.text,\r\n                                    Diagnosis = diagnosisController.text,\r\n                                    Bmi = bmiController.text,\r\n                                    Perilaku = perilakuController.text,\r\n                                    Pola = polaController.text,\r\n                                    Usia = usiaController.text,\r\n                                    Tahun = tahunController.text\r\n                                )\r\n                            )\r\n                            Log.d(\"Id History\",ids.toString())}\r\n                        try {\r\n                            resultCollection.document(emailController.text)\r\n                                .set(hashMapOf(\"history\" to FieldValue.arrayUnion(diagResult)))\r\n                                .addOnSuccessListener {\r\n                                    Toast.makeText(context,\r\n                                        \"Berhasil menyimpan hasil\",\r\n                                        Toast.LENGTH_SHORT).show()\r\n                                    navController.navigate(Screen.WelcomeScreen.route){popUpTo(0)}\r\n                                }.addOnFailureListener {\r\n                                    Toast.makeText(context,\r\n                                        \"Gagal menyimpan hasil\",\r\n                                        Toast.LENGTH_SHORT).show()\r\n                                }\r\n                        } catch (e: Exception){\r\n                            println(\"we catch something\")\r\n                        }\r\n                        insertIntoDB(mHistoryViewModel)\r\n                    }) {\r\n                        Text(text = \"Back to home\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/gigi_ibuhamil/pages/kesimpulanscreen/kesimpulanscreen.kt b/app/src/main/java/com/example/gigi_ibuhamil/pages/kesimpulanscreen/kesimpulanscreen.kt
--- a/app/src/main/java/com/example/gigi_ibuhamil/pages/kesimpulanscreen/kesimpulanscreen.kt	(revision 8f09fae3bbe942fe3418f895e9a58fd22d96f902)
+++ b/app/src/main/java/com/example/gigi_ibuhamil/pages/kesimpulanscreen/kesimpulanscreen.kt	(date 1656319600508)
@@ -32,7 +32,6 @@
 import com.example.gigi_ibuhamil.util.Screen
 import com.example.gigi_ibuhamil.models.Result
 import com.google.firebase.firestore.FieldValue
-import com.google.firebase.firestore.SetOptions
 import com.google.firebase.firestore.ktx.firestore
 import com.google.firebase.ktx.Firebase
 
@@ -80,7 +79,6 @@
     )
     val db = Firebase.firestore
     val resultCollection = db.collection("result")
-    val userCollection = db.collection("users")
     val nama = SavedPreference.getDisplayName(context = context).toString()
     val diagnosis = SavedPreference.getDiagnosis(context = context).toString()
     val email = SavedPreference.getEmail(context = context).toString()
